#include <bits/stdc++.h>
using namespace std;
 
 int find_and(vector<int> arr, int len)
{
    // Initialise ans variable is arr[0]
    int ans = arr[0];
    // Traverse the array compute AND
    for (int i = 0; i < len; i++)
        ans = (ans & arr[i]);
    return ans;
}
 
// Recursive function to print all
// possible subsequences for given array
bool printSubsequences(vector<int> arr, int index,
                       vector<int> &subarr,int n, int B)
{
    // Print the subsequence when reach
    // the leaf of recursion tree
    if (index == n)
    {
        if(subarr.size()>0){
        int ans = find_and(subarr,subarr.size());
    //   cout<<ans<<endl;
       if(ans==B)return true;
      return false;
        }
 
         
    }
    else
    {
       //pick the current index into the subsequence.
        subarr.push_back(arr[index]);
       
 
         if(printSubsequences(arr, index + 1, subarr,n,B))return true;
 
         
        subarr.pop_back();
       
      //not picking the element into the subsequence.
        if(printSubsequences(arr, index + 1, subarr,n,B))return true;
    }
    
}

int main() {
	// your code goes here
	int t;
	cin>>t;
	while(t--){
	    int n,B;
	    cin>>n>>B;
	    vector<int> arr(n);
	    for(int i=0;i<n;i++){
	        cin>>arr[i];
	    }
	   // vector<int> vec;
	   // cout<< (getSubs(arr,0,op,n,B)?"yes":"no") << endl;
	    
	    
	    
	    
	    
	    
	    vector<int> vec;
	    bool ans = printSubsequences(arr, 0, vec,n,B);
	    
	    if(ans)cout<<"yes"<<endl;
	    else cout<<"no"<<endl;
	    
	}
	return 0;
}
